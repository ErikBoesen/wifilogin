The main page appears to be a very simple HTML page with inline JavaScript and all styling done via HTML (ew).
The various legal agreements are shown through an iframe sourcing a file "aup.html" which has no apparent role in the login process and can be safely ignored. The file yourlogo.png also isn't useful for obvious reasons.
The only interesting part of the initially loaded page is the JavaScript code embedded directly in the HTML. loadAction, submitAction, and reject functions are run through onclick listeners (for buttons, which trigger the submitAction and reject functions) and onload property on the body for the loadAction function.

loadAction: most of this function is devoted to turning the URL parameters into a dictionary, after which the main form's action property is set to the current page's URL without parameters. This is  probably just a way that this page adapts to being used by different schools since not all will be using the domain guestwifi.fccps.org.

submitAction: this function just extracts the redirect URL from the current page URL. It actually fully duplicates loadAction in one place. They could have just called that function... or even omitted it entirely... oh well.

reject: just opens a popup. Not important.

The important bit is at the bottom of submitAction, where the property buttonClicked of the form is set to 4. I don't know what 4 would be, other than perhaps a convenient number to use for bit logic?
I doubt the redirect_url input (heh, they mixed camel case with underscores) will be very important, but probably a good idea to send along that parameter in a POST request. Same thing with err_flag, which isn't mentioned anywhere else, but should probably be sent as the default zero to let the server know that there's no issue.

I can probably just use the Python requests package to send a nice dictionary at the normal calculated URL. I'll test this when I get back to school on Monday.
